(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{453:function(n,e,l){"use strict";l.r(e);var t=l(1),o=Object(t.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[this._v("两数相加")])]),this._v(" "),n("p",[this._v("(``` js)\ndef addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n# 定义头节点，val赋值为0\nhead_node = ListNode(0)\nnode = head_node")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[this._v("    # 进位标识符carry，初值为0\n    carry = 0\n\n    # while循环，对两链表对应位和上一位产生的进位carry进行相加操作，并判断是否产生了进位，记录carry值\n    while l1 !=None or l2 != None:\n        l1_num = l1.val if l1 != None else 0\n        l2_num = l2.val if l2 != None else 0\n        num = (l1_num + l2_num + carry)%10 #获得两数相加后的个位数，carry值：前一次循环中两数相加是否进位\n        carry = 1 if l1_num + l2_num + carry>= 10 else 0  # 判断是否产生进位，求和时不要忘记前两位相加时产生的carry值\n        node.next = ListNode(num)  # 在链表尾部添加本次循环所得节点，num是该节点的值\n        node = node.next    #node向后移动\n        l1 = l1.next if l1 !=None else None  # l1指向下一节点\n        l2 = l2.next if l2 !=None else None  # l2指向下一节点\n\n    # 循环后若最高位产生了进位则在链表尾部添加一个val为1的节点\n    if carry == 1:\n        node.next = ListNode(1)\n\n    # 最后结果舍弃头节点\n    head_node = head_node.next\n    return head_node\n")])])]),n("p",[this._v("(```)")])])}),[],!1,null,null,null);e.default=o.exports}}]);